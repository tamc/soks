h1. How to password protect your wiki

You can specify what authentication to be used based on a regular expression match against the url used to access the page.

Open @start.rb@ in your wiki directory. Un-comment and edit the authenticators section and edit the array.  The format is [  [ first regexp to match against title, authenticator to use ],  [ second regexp to match against title, authenticator to use ] ... ]. For example:

h2. No authentication

The following matches against all the standard 'non editing commands' and doesn't ask for any authentication:

<code>[ %r{/(view|rss|print|find|meta)/.*}, WEBrick::HTTPAuth::NoAuthenticationRequired.new ]</code>

h2. No uploads

The following doesn't permit any file or picture uploads:

<code>[ %r{/upload/.*}, WEBrick::HTTPAuth::NotPermitted.new ]</code>

h2. Site wide password

The following asks for a site wide password to edit or save changes to the home page:

<code>[ %r{/(edit|save)/home page}, WEBrick::HTTPAuth::SiteWidePassword.new('password','You need to enter the site wide password to edit the home page') ]</code>

h2. Per-user passwords

The following uses the standard WEBrick authentication system on any page whose name starts with private. The standard WEBrick authentication uses a database of usernames and passwords.  See [[ Gnome's Guide => http://shogo.homelinux.org/~ysantoso/webrickguide/html/html_webrick.html ]] for details.

<code>[ %r{/(view|edit|save)/private.*},WEBrick::HTTPAuth::BasicAuth.new( :UserDB => htpasswd, :Realm => realm ) ]</code>

The following is the default. For any page it just asks for a username, but the password can be left blank.

<code>[ %r{.*}, WEBrick::HTTPAuth::AskForUserName.new( 'No password, just enter a name') ]</code>			
BasicAuth isn't very secure as it transfers passwords over plaintext. If you can cope with some incompatability with very old browsers, DigestAuth is more secure. To implement DigestAuth:

# run this command: @htdigest -c /path/to/your/soks-wiki/htdigest "name of your realm" yourusername@ and enter your password. On gentoo, the full path is @/usr/sbin/htdigest2@
# Add this line into start.rb, inside the authenticators= block: @[ %r{/(view|edit|save)/private.*},WEBrick::HTTPAuth::DigestAuth.new( :UserDB => WEBrick::HTTPAuth::Htdigest.new('/path/to/your/soks-wiki/htdigest'), :Realm => "name of your realm") ]@

h2. Multiple authentication systems

To further-complicate your login woes, there is a nifty trick you can pull with the way Soks does its authentications. Because it creates a separate instance of the authenticator for each regexp, you can stack 'em :) Say you want to restrict viewing to those who have an account, but you don't want everyone to be able to edit. The first step is to create two htdigest files. One will have those who can read, the other those who can write. When you make these files, ensure that the realms are identical. Now assign the htdigest.write to the (edit|save) bits, and the htdigest.read to the (view|print|etc) bits. The annoying bit is that users who can edit need to be added to both files, but it makes up for it by users not having to login again when they want to edit. 

----

h2. Suggestions / The future

Is there any means to changing the authentication on the fly like how the editable "sidebar page" works?  (Have a "master" page that is access controlled, on which one would put other page links that would then become access controlled.) --Bil

Can someone point me to an example (or outline the steps) to having the user names checked for validity by an LDAP server ?  (Note: I asked a similar question on the Webricken mailing list.) --Bil

Not used LDAP myself, but the example at http://dataspill.org/posts/show/4 seems to show how one might communicate with the LDAP server to check valididty.  This would need to be inserted into a WEBrick authenticator. If you just duplicate the code of an existing WEBrick authenticator (e.g. 1.8/webrick/httpauth/basicath.rb) you should be able to do a few tweaks to the authenticate method to get what you want.  --tamc2

Tag: Include this page in the distribution
